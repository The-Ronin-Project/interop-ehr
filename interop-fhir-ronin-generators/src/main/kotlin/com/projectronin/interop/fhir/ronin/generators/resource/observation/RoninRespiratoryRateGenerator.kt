package com.projectronin.interop.fhir.ronin.generators.resource.observation

import com.projectronin.interop.fhir.generators.datatypes.codeableConcept
import com.projectronin.interop.fhir.generators.datatypes.coding
import com.projectronin.interop.fhir.generators.primitives.of
import com.projectronin.interop.fhir.generators.resources.ObservationGenerator
import com.projectronin.interop.fhir.r4.datatype.primitive.Code
import com.projectronin.interop.fhir.r4.resource.Observation
import com.projectronin.interop.fhir.r4.resource.Patient
import com.projectronin.interop.fhir.ronin.generators.resource.referenceData
import com.projectronin.interop.fhir.ronin.generators.util.generateCodeableConcept
import com.projectronin.interop.fhir.ronin.generators.util.generateEffectiveDateTime
import com.projectronin.interop.fhir.ronin.generators.util.generateExtension
import com.projectronin.interop.fhir.ronin.generators.util.generateReference
import com.projectronin.interop.fhir.ronin.generators.util.rcdmMeta
import com.projectronin.interop.fhir.ronin.profile.RoninProfile

/**
 * Helps generate ronin respiratory rate observation profile, applies meta and randomly generates an
 * acceptable code from the [possibleRespiratoryRateCodes] list, category is generated by base-vital-signs
 */
fun rcdmObservationRespiratoryRate(tenant: String, block: ObservationGenerator.() -> Unit): Observation {
    return rcdmBaseObservation(tenant) {
        block.invoke(this)
        meta of rcdmMeta(RoninProfile.OBSERVATION_RESPIRATORY_RATE, tenant) {}
        extension of generateExtension(extension.generate(), tenantSourceExtension)
        category of listOf(codeableConcept { coding of vitalSignsCategory })
        code of generateCodeableConcept(code.generate(), possibleRespiratoryRateCodes.random())
        subject of generateReference(subject.generate(), subjectReferenceOptions, tenant, "Patient")
        effective of generateEffectiveDateTime(effective.generate(), possibleDateTime)
    }
}

fun Patient.rcdmObservationRespiratoryRate(block: ObservationGenerator.() -> Unit): Observation {
    val data = this.referenceData()
    return rcdmObservationRespiratoryRate(data.tenantId) {
        block.invoke(this)
        subject of generateReference(
            subject.generate(),
            subjectReferenceOptions,
            data.tenantId,
            "Patient",
            data.udpId
        )
    }
}

val possibleRespiratoryRateCodes = listOf(
    coding {
        system of "http://loinc.org"
        version of "2.74"
        code of Code("76270-8")
        display of "Respiratory rate by Impedance.transthoracic"
    },
    coding {
        system of "http://loinc.org"
        version of "2.74"
        code of Code("9279-1")
        display of "Respiratory rate"
    },
    coding {
        system of "http://loinc.org"
        version of "2.74"
        code of Code("76172-6")
        display of "Respiratory rate by Carbon dioxide measurement"
    },
    coding {
        system of "http://loinc.org"
        version of "2.74"
        code of Code("76174-2")
        display of "Respiratory rate by Pulse oximetry.plethysmograph"
    },
    coding {
        system of "http://loinc.org"
        version of "2.74"
        code of Code("76170-0")
        display of "Respiratory rate by Acoustic measurement"
    },
    coding {
        system of "http://loinc.org"
        version of "2.74"
        code of Code("76173-4")
        display of "Respiratory rate by Non-airway pressure measurement"
    },
    coding {
        system of "http://loinc.org"
        version of "2.74"
        code of Code("76171-8")
        display of "Respiratory rate by Airway flow measurement"
    }
)
