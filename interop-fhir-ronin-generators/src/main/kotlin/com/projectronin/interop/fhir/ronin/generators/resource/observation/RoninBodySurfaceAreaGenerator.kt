package com.projectronin.interop.fhir.ronin.generators.resource.observation

import com.projectronin.interop.fhir.generators.datatypes.codeableConcept
import com.projectronin.interop.fhir.generators.datatypes.coding
import com.projectronin.interop.fhir.generators.resources.ObservationGenerator
import com.projectronin.interop.fhir.r4.datatype.primitive.Code
import com.projectronin.interop.fhir.r4.resource.Observation
import com.projectronin.interop.fhir.r4.resource.Patient
import com.projectronin.interop.fhir.ronin.generators.resource.referenceData
import com.projectronin.interop.fhir.ronin.generators.util.generateCodeableConcept
import com.projectronin.interop.fhir.ronin.generators.util.generateEffectiveDateTime
import com.projectronin.interop.fhir.ronin.generators.util.generateExtension
import com.projectronin.interop.fhir.ronin.generators.util.generateReference
import com.projectronin.interop.fhir.ronin.generators.util.rcdmMeta
import com.projectronin.interop.fhir.ronin.profile.RoninProfile

/**
 * Helps generate ronin body surface area observation profile, applies meta and randomly generates an
 * acceptable code from the [possibleBodySurfaceAreaCodes] list, category is generated by base-vital-signs
 */
fun rcdmObservationBodySurfaceArea(tenant: String, block: ObservationGenerator.() -> Unit): Observation {
    return rcdmBaseObservation(tenant) {
        block.invoke(this)
        meta of rcdmMeta(RoninProfile.OBSERVATION_BODY_SURFACE_AREA, tenant) {}
        extension of generateExtension(extension.generate(), tenantSourceExtension)
        category of listOf(codeableConcept { coding of vitalSignsCategory })
        code of generateCodeableConcept(code.generate(), possibleBodySurfaceAreaCodes.random())
        subject of generateReference(subject.generate(), subjectReferenceOptions, tenant, "Patient")
        effective of generateEffectiveDateTime(effective.generate(), possibleDateTime)
    }
}

fun Patient.rcdmObservationBodySurfaceArea(block: ObservationGenerator.() -> Unit): Observation {
    val data = this.referenceData()
    return rcdmObservationBodySurfaceArea(data.tenantId) {
        block.invoke(this)
        subject of generateReference(
            subject.generate(),
            subjectReferenceOptions,
            data.tenantId,
            "Patient",
            data.udpId
        )
    }
}

val possibleBodySurfaceAreaCodes = listOf(
    coding {
        system of "http://loinc.org"
        version of "2.74"
        code of Code("8277-6")
        display of "Body surface area"
    },
    coding {
        system of "http://loinc.org"
        version of "2.74"
        code of Code("3140-1")
        display of "Body surface area Derived from formula"
    },
    coding {
        system of "http://loinc.org"
        version of "2.74"
        code of Code("3139-3")
        display of "Body surface area Measured"
    }
)
