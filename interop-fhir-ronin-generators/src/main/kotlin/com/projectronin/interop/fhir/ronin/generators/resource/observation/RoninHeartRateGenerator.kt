package com.projectronin.interop.fhir.ronin.generators.resource.observation

import com.projectronin.interop.fhir.generators.datatypes.codeableConcept
import com.projectronin.interop.fhir.generators.datatypes.coding
import com.projectronin.interop.fhir.generators.primitives.of
import com.projectronin.interop.fhir.generators.resources.ObservationGenerator
import com.projectronin.interop.fhir.r4.datatype.primitive.Code
import com.projectronin.interop.fhir.r4.resource.Observation
import com.projectronin.interop.fhir.r4.resource.Patient
import com.projectronin.interop.fhir.ronin.generators.resource.referenceData
import com.projectronin.interop.fhir.ronin.generators.util.generateCodeableConcept
import com.projectronin.interop.fhir.ronin.generators.util.generateEffectiveDateTime
import com.projectronin.interop.fhir.ronin.generators.util.generateReference
import com.projectronin.interop.fhir.ronin.generators.util.rcdmMeta
import com.projectronin.interop.fhir.ronin.normalization.ValueSetList
import com.projectronin.interop.fhir.ronin.profile.RoninProfile
import com.projectronin.interop.fhir.ronin.validation.ValueSetMetadata

/**
 * Helps generate ronin heart rate observation profile, applies meta and randomly generates an
 * acceptable code from the [possibleHeartRateCodes] list, category is generated by base-vital-signs
 */
fun rcdmObservationHeartRate(tenant: String, block: ObservationGenerator.() -> Unit): Observation {
    return rcdmBaseObservation(tenant) {
        block.invoke(this)
        meta of rcdmMeta(RoninProfile.OBSERVATION_HEART_RATE, tenant) {}
        category of listOf(codeableConcept { coding of vitalSignsCategory })
        code of generateCodeableConcept(code.generate(), possibleHeartRateCodes.codes.random())
        subject of generateReference(subject.generate(), subjectReferenceOptions, tenant, "Patient")
        effective of generateEffectiveDateTime(effective.generate(), possibleDateTime)
    }
}

fun Patient.rcdmObservationHeartRate(block: ObservationGenerator.() -> Unit): Observation {
    val data = this.referenceData()
    return rcdmObservationHeartRate(data.tenantId) {
        block.invoke(this)
        subject of generateReference(
            subject.generate(),
            subjectReferenceOptions,
            data.tenantId,
            "Patient",
            data.udpId
        )
    }
}

val possibleHeartRateCodes = ValueSetList(
    listOf(
        coding {
            system of "http://loinc.org"
            version of "2.74"
            code of Code("8867-4")
            display of "Heart rate"
        },
        coding {
            system of "http://loinc.org"
            version of "2.74"
            code of Code("76477-9")
            display of "Heart rate by Noninvasive"
        },
        coding {
            system of "http://loinc.org"
            version of "2.74"
            code of Code("11328-2")
            display of "Heart rate at First encounter"
        }
    ),
    ValueSetMetadata(
        registryEntryType = "value_set",
        valueSetName = "heartratenoninvasive",
        valueSetUuid = "809f547e-cb7e-438f-84af-8852d586c718",
        version = "2"
    )
)
